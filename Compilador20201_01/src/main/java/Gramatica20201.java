import java.util.ArrayList;
import java.util.List;

/* Generated By:JavaCC: Do not edit this line. Gramatica20201.java */
public class Gramatica20201 implements Gramatica20201Constants {
  public static List<String> resultado = new ArrayList<String >();

  static final public int start() throws ParseException {
    wff();
    {if (true) return 0;}  // returns 0 on successful parse

    throw new Error("Missing return statement in function");
  }

  static final public void wff() throws ParseException {
    term();
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case DO:
      case THIS:
      case BODY:
      case DESCRIPTION:
      case DECLARATION:
      case TYPE:
      case IS:
      case CONSTANT:
      case AND:
      case VARIABLE:
      case AS:
      case INTEGER:
      case REAL:
      case STRING:
      case LOGIC:
      case DESIGNATE:
      case READ:
      case WRITE:
      case ALL:
      case REPEAT:
      case AVALIATE:
      case RESULT:
      case COLCH_ESQ:
      case COLCH_DIR:
      case PONTO:
      case VIRGULA:
      case PAREN_ESQ:
      case IGUAL:
      case DIFERENTE:
      case MENOR:
      case MAIOR:
      case MENOR_IGUAL:
      case MAIOR_IGUAL:
      case SOMA:
      case SUBTRACAO:
      case MULTIPLICACAO:
      case DIVISAO:
      case POTENCIA:
      case DIVISAO_INTEIRA:
      case DIVISAO_INTEIRA_RESTO:
      case E:
      case OU:
      case NAO:
      case CLOGICA:
      case CLITERAL:
      case CINTEIRO:
      case CREAL:
      case IDENTIFICADOR:
        ;
        break;
      default:
        jj_la1[0] = jj_gen;
        break label_1;
      }
      term();
    }
  }

  static final public void term() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case DO:
    case THIS:
    case BODY:
    case DESCRIPTION:
    case DECLARATION:
    case TYPE:
    case IS:
    case CONSTANT:
    case AND:
    case VARIABLE:
    case AS:
    case INTEGER:
    case REAL:
    case STRING:
    case LOGIC:
    case DESIGNATE:
    case READ:
    case WRITE:
    case ALL:
    case REPEAT:
    case AVALIATE:
    case RESULT:
    case COLCH_ESQ:
    case COLCH_DIR:
    case PONTO:
    case VIRGULA:
    case IGUAL:
    case DIFERENTE:
    case MENOR:
    case MAIOR:
    case MENOR_IGUAL:
    case MAIOR_IGUAL:
    case SOMA:
    case SUBTRACAO:
    case MULTIPLICACAO:
    case DIVISAO:
    case POTENCIA:
    case DIVISAO_INTEIRA:
    case DIVISAO_INTEIRA_RESTO:
    case E:
    case OU:
    case NAO:
    case CLOGICA:
    case CLITERAL:
    case CINTEIRO:
    case CREAL:
    case IDENTIFICADOR:
      symbol();
      break;
    case PAREN_ESQ:
      jj_consume_token(PAREN_ESQ);
      wff();
      jj_consume_token(PAREN_DIR);
      break;
    default:
      jj_la1[1] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void symbol() throws ParseException {
 Token t;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IDENTIFICADOR:
      t = jj_consume_token(IDENTIFICADOR);
                        resultado.add(t+" - Linha: "+t.beginLine+" - Coluna: "+(t.beginColumn-1)+" - Categoria: "+t.kind+" IDENTIFICADOR");
      break;
    case DO:
      t = jj_consume_token(DO);
              resultado.add(t+" - Linha: "+t.beginLine+" - Coluna: "+(t.beginColumn-1)+" - Categoria: "+t.kind+" PALAVRA RESERVADA");
      break;
    case THIS:
      t = jj_consume_token(THIS);
                resultado.add(t+" - Linha: "+t.beginLine+" - Coluna: "+(t.beginColumn-1)+" - Categoria: "+t.kind+" PALAVRA RESERVADA");
      break;
    case BODY:
      t = jj_consume_token(BODY);
                resultado.add(t+" - Linha: "+t.beginLine+" - Coluna: "+(t.beginColumn-1)+" - Categoria: "+t.kind+" PALAVRA RESERVADA");
      break;
    case DESCRIPTION:
      t = jj_consume_token(DESCRIPTION);
                       resultado.add(t+" - Linha: "+t.beginLine+" - Coluna: "+(t.beginColumn-1)+" - Categoria: "+t.kind+" PALAVRA RESERVADA");
      break;
    case DECLARATION:
      t = jj_consume_token(DECLARATION);
                       resultado.add(t+" - Linha: "+t.beginLine+" - Coluna: "+(t.beginColumn-1)+" - Categoria: "+t.kind+" PALAVRA RESERVADA");
      break;
    case TYPE:
      t = jj_consume_token(TYPE);
                resultado.add(t+" - Linha: "+t.beginLine+" - Coluna: "+(t.beginColumn-1)+" - Categoria: "+t.kind+" PALAVRA RESERVADA");
      break;
    case IS:
      t = jj_consume_token(IS);
              resultado.add(t+" - Linha: "+t.beginLine+" - Coluna: "+(t.beginColumn-1)+" - Categoria: "+t.kind+" PALAVRA RESERVADA");
      break;
    case CONSTANT:
      t = jj_consume_token(CONSTANT);
                    resultado.add(t+" - Linha: "+t.beginLine+" - Coluna: "+(t.beginColumn-1)+" - Categoria: "+t.kind+" PALAVRA RESERVADA");
      break;
    case AND:
      t = jj_consume_token(AND);
               resultado.add(t+" - Linha: "+t.beginLine+" - Coluna: "+(t.beginColumn-1)+" - Categoria: "+t.kind+" PALAVRA RESERVADA");
      break;
    case VARIABLE:
      t = jj_consume_token(VARIABLE);
                    resultado.add(t+" - Linha: "+t.beginLine+" - Coluna: "+(t.beginColumn-1)+" - Categoria: "+t.kind+" PALAVRA RESERVADA");
      break;
    case AS:
      t = jj_consume_token(AS);
              resultado.add(t+" - Linha: "+t.beginLine+" - Coluna: "+(t.beginColumn-1)+" - Categoria: "+t.kind+" PALAVRA RESERVADA");
      break;
    case INTEGER:
      t = jj_consume_token(INTEGER);
                   resultado.add(t+" - Linha: "+t.beginLine+" - Coluna: "+(t.beginColumn-1)+" - Categoria: "+t.kind+" PALAVRA RESERVADA");
      break;
    case REAL:
      t = jj_consume_token(REAL);
                resultado.add(t+" - Linha: "+t.beginLine+" - Coluna: "+(t.beginColumn-1)+" - Categoria: "+t.kind+" PALAVRA RESERVADA");
      break;
    case STRING:
      t = jj_consume_token(STRING);
                  resultado.add(t+" - Linha: "+t.beginLine+" - Coluna: "+(t.beginColumn-1)+" - Categoria: "+t.kind+" PALAVRA RESERVADA");
      break;
    case LOGIC:
      t = jj_consume_token(LOGIC);
                 resultado.add(t+" - Linha: "+t.beginLine+" - Coluna: "+(t.beginColumn-1)+" - Categoria: "+t.kind+" PALAVRA RESERVADA");
      break;
    case DESIGNATE:
      t = jj_consume_token(DESIGNATE);
                     resultado.add(t+" - Linha: "+t.beginLine+" - Coluna: "+(t.beginColumn-1)+" - Categoria: "+t.kind+" PALAVRA RESERVADA");
      break;
    case READ:
      t = jj_consume_token(READ);
                resultado.add(t+" - Linha: "+t.beginLine+" - Coluna: "+(t.beginColumn-1)+" - Categoria: "+t.kind+" PALAVRA RESERVADA");
      break;
    case WRITE:
      t = jj_consume_token(WRITE);
                 resultado.add(t+" - Linha: "+t.beginLine+" - Coluna: "+(t.beginColumn-1)+" - Categoria: "+t.kind+" PALAVRA RESERVADA");
      break;
    case ALL:
      t = jj_consume_token(ALL);
               resultado.add(t+" - Linha: "+t.beginLine+" - Coluna: "+(t.beginColumn-1)+" - Categoria: "+t.kind+" PALAVRA RESERVADA");
      break;
    case REPEAT:
      t = jj_consume_token(REPEAT);
                  resultado.add(t+" - Linha: "+t.beginLine+" - Coluna: "+(t.beginColumn-1)+" - Categoria: "+t.kind+" PALAVRA RESERVADA");
      break;
    case AVALIATE:
      t = jj_consume_token(AVALIATE);
                    resultado.add(t+" - Linha: "+t.beginLine+" - Coluna: "+(t.beginColumn-1)+" - Categoria: "+t.kind+" PALAVRA RESERVADA");
      break;
    case RESULT:
      t = jj_consume_token(RESULT);
                  resultado.add(t+" - Linha: "+t.beginLine+" - Coluna: "+(t.beginColumn-1)+" - Categoria: "+t.kind+" PALAVRA RESERVADA");
      break;
    case SOMA:
      t = jj_consume_token(SOMA);
                resultado.add(t+" - Linha: "+t.beginLine+" - Coluna: "+(t.beginColumn-1)+" - Categoria: "+t.kind+" OPERADOR ARITM\u00c9TICO");
      break;
    case SUBTRACAO:
      t = jj_consume_token(SUBTRACAO);
                     resultado.add(t+" - Linha: "+t.beginLine+" - Coluna: "+(t.beginColumn-1)+" - Categoria: "+t.kind+" OPERADOR ARITM\u00c9TICO");
      break;
    case DIVISAO:
      t = jj_consume_token(DIVISAO);
                   resultado.add(t+" - Linha: "+t.beginLine+" - Coluna: "+(t.beginColumn-1)+" - Categoria: "+t.kind+" OPERADOR ARITM\u00c9TICO");
      break;
    case POTENCIA:
      t = jj_consume_token(POTENCIA);
                    resultado.add(t+" - Linha: "+t.beginLine+" - Coluna: "+(t.beginColumn-1)+" - Categoria: "+t.kind+" OPERADOR ARITM\u00c9TICO");
      break;
    case MULTIPLICACAO:
      t = jj_consume_token(MULTIPLICACAO);
                         resultado.add(t+" - Linha: "+t.beginLine+" - Coluna: "+(t.beginColumn-1)+" - Categoria: "+t.kind+" OPERADOR ARITM\u00c9TICO");
      break;
    case DIVISAO_INTEIRA:
      t = jj_consume_token(DIVISAO_INTEIRA);
                           resultado.add(t+" - Linha: "+t.beginLine+" - Coluna: "+(t.beginColumn-1)+" - Categoria: "+t.kind+" OPERADOR ARITM\u00c9TICO");
      break;
    case DIVISAO_INTEIRA_RESTO:
      t = jj_consume_token(DIVISAO_INTEIRA_RESTO);
                                 resultado.add(t+" - Linha: "+t.beginLine+" - Coluna: "+(t.beginColumn-1)+" - Categoria: "+t.kind+" OPERADOR ARITM\u00c9TICO");
      break;
    case IGUAL:
      t = jj_consume_token(IGUAL);
                 resultado.add(t+" - Linha: "+t.beginLine+" - Coluna: "+(t.beginColumn-1)+" - Categoria: "+t.kind+" OPERADOR RELACIONAL");
      break;
    case DIFERENTE:
      t = jj_consume_token(DIFERENTE);
                     resultado.add(t+" - Linha: "+t.beginLine+" - Coluna: "+(t.beginColumn-1)+" - Categoria: "+t.kind+" OPERADOR RELACIONAL");
      break;
    case MENOR:
      t = jj_consume_token(MENOR);
                 resultado.add(t+" - Linha: "+t.beginLine+" - Coluna: "+(t.beginColumn-1)+" - Categoria: "+t.kind+" OPERADOR RELACIONAL");
      break;
    case MAIOR:
      t = jj_consume_token(MAIOR);
                 resultado.add(t+" - Linha: "+t.beginLine+" - Coluna: "+(t.beginColumn-1)+" - Categoria: "+t.kind+" OPERADOR RELACIONAL");
      break;
    case MENOR_IGUAL:
      t = jj_consume_token(MENOR_IGUAL);
                       resultado.add(t+" - Linha: "+t.beginLine+" - Coluna: "+(t.beginColumn-1)+" - Categoria: "+t.kind+" OPERADOR RELACIONAL");
      break;
    case MAIOR_IGUAL:
      t = jj_consume_token(MAIOR_IGUAL);
                       resultado.add(t+" - Linha: "+t.beginLine+" - Coluna: "+(t.beginColumn-1)+" - Categoria: "+t.kind+" OPERADOR RELACIONAL");
      break;
    case E:
      t = jj_consume_token(E);
             resultado.add(t+" - Linha: "+t.beginLine+" - Coluna: "+(t.beginColumn-1)+" - Categoria: "+t.kind+" OPERADOR L\u00d3GICO");
      break;
    case OU:
      t = jj_consume_token(OU);
              resultado.add(t+" - Linha: "+t.beginLine+" - Coluna: "+(t.beginColumn-1)+" - Categoria: "+t.kind+" OPERADOR L\u00d3GICO");
      break;
    case NAO:
      t = jj_consume_token(NAO);
               resultado.add(t+" - Linha: "+t.beginLine+" - Coluna: "+(t.beginColumn-1)+" - Categoria: "+t.kind+" OPERADOR L\u00d3GICO");
      break;
    case COLCH_ESQ:
      t = jj_consume_token(COLCH_ESQ);
                     resultado.add(t+" - Linha: "+t.beginLine+" - Coluna: "+(t.beginColumn-1)+" - Categoria: "+t.kind+"SIMBOLO");
      break;
    case COLCH_DIR:
      t = jj_consume_token(COLCH_DIR);
                     resultado.add(t+" - Linha: "+t.beginLine+" - Coluna: "+(t.beginColumn-1)+" - Categoria: "+t.kind+" SIMBOLO");
      break;
    case PONTO:
      t = jj_consume_token(PONTO);
                 resultado.add(t+" - Linha: "+t.beginLine+" - Coluna: "+(t.beginColumn-1)+" - Categoria: "+t.kind+" SIMBOLO");
      break;
    case VIRGULA:
      t = jj_consume_token(VIRGULA);
                   resultado.add(t+" - Linha: "+t.beginLine+" - Coluna: "+(t.beginColumn-1)+" - Categoria: "+t.kind+" SIMBOLO");
      break;
    case CLOGICA:
      t = jj_consume_token(CLOGICA);
                   resultado.add(t+" - Linha: "+t.beginLine+" - Coluna: "+(t.beginColumn-1)+" - Categoria: "+t.kind+" CONSTANTE L\u00d3GICA");
      break;
    case CLITERAL:
      t = jj_consume_token(CLITERAL);
                    resultado.add(t+" - Linha: "+t.beginLine+" - Coluna: "+(t.beginColumn-1)+" - Categoria: "+t.kind+" CONSTANTE LITERAL");
      break;
    case CINTEIRO:
      t = jj_consume_token(CINTEIRO);
                    resultado.add(t+" - Linha: "+t.beginLine+" - Coluna: "+(t.beginColumn-1)+" - Categoria: "+t.kind+" N\u00daMERO INTEIRO");
      break;
    case CREAL:
      t = jj_consume_token(CREAL);
                 resultado.add(t+" - Linha: "+t.beginLine+" - Coluna: "+(t.beginColumn-1)+" - Categoria: "+t.kind+" N\u00daMERO REAL");
      break;
    default:
      jj_la1[2] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static private boolean jj_initialized_once = false;
  /** Generated Token Manager. */
  static public Gramatica20201TokenManager token_source;
  static SimpleCharStream jj_input_stream;
  /** Current token. */
  static public Token token;
  /** Next token. */
  static public Token jj_nt;
  static private int jj_ntk;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[3];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0xfffffe00,0xfffffe00,0xfffffe00,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0xb7fffef,0xb7fffef,0xb7fffe7,};
   }

  /** Constructor with InputStream. */
  public Gramatica20201(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public Gramatica20201(java.io.InputStream stream, String encoding) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new Gramatica20201TokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 3; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 3; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public Gramatica20201(java.io.Reader stream) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new Gramatica20201TokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 3; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 3; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public Gramatica20201(Gramatica20201TokenManager tm) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 3; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(Gramatica20201TokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 3; i++) jj_la1[i] = -1;
  }

  static private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  static final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  static final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  static private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  static private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  static private int[] jj_expentry;
  static private int jj_kind = -1;

  /** Generate ParseException. */
  static public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[64];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 3; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 64; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  static final public void enable_tracing() {
  }

  /** Disable tracing. */
  static final public void disable_tracing() {
  }

  }
